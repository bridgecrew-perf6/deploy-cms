name: 'Infrastructure Provisioning on the Master Branch'
on: 
  push:
    branches:
      - master
defaults:
      run:
        shell: bash

env:
  TAG: "${{ secrets.IMAGE_TAG }}"
  IMAGE: "${{ secrets.IMAGE_NAME }}"
  REGISTRY_HOSTNAME: gcr.io
  GC_PROJECT_ID: "${{ secrets.GC_PROJECT_ID }}"
  TERRAFORM_BUILD_TYPE: "${{ secrets.TERRAFORM_BUILD_TYPE }}"
  ## Define variables for Terraform
  TF_VAR_GC_PROJECT_ID: "${{ secrets.GC_PROJECT_ID }}"
  TF_VAR_IMAGE: "${{ secrets.IMAGE_NAME }}"
  TF_VAR_AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  TF_VAR_AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  TF_VAR_AWS_STORAGE_BUCKET_NAME: "${{ secrets.AWS_STORAGE_BUCKET_NAME }}"
  TF_VAR_AWS_STORAGE_BUCKET_ARN1: "${{ secrets.AWS_STORAGE_BUCKET_ARN1 }}"
  TF_VAR_AWS_STORAGE_BUCKET_ARN2: "${{ secrets.AWS_STORAGE_BUCKET_ARN2 }}"


jobs:
## Optional Slack notification about pipeline initiation
#  slack-notification:
#    name: Notify Slack channel that deployment started
#    runs-on: ubuntu-latest
#    steps:

#    - name: Send message to Slack API
#      uses: archive/github-actions-slack@v1.0.3
#      with:
#        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_ACCESS_TOKEN }}
#        slack-channel: ${{ secrets.SLACK_CHANNEL }}
#        slack-text: "A new deployment workflow has been triggered by Github Actions."


## Build and publish the container image to GCR
  build-and-publish-to-gcr:
    name: Setup, Build, and Publish
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        project_id: "${{ secrets.GC_PROJECT_ID }}"
        service_account_key: "${{ secrets.GC_KEY }}" 

    - run: |
        gcloud auth configure-docker

    - name: Build
      run: |
        docker build --build-arg DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" --build-arg DJANGO_DB_HOST="${{ secrets.DJANGO_DB_HOST }}" --build-arg DJANGO_DB_NAME="${{ secrets.DJANGO_DB_NAME }}" --build-arg DJANGO_DB_USER="${{ secrets.DJANGO_DB_USER }}" --build-arg DJANGO_DB_PASSWORD="${{ secrets.DJANGO_DB_PASSWORD }}" --build-arg DJANGO_DB_PORT="${{ secrets.DJANGO_DB_PORT }}" --build-arg AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" --build-arg AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" --build-arg AWS_STORAGE_BUCKET_NAME="${{ secrets.AWS_STORAGE_BUCKET_NAME }}" --build-arg AWS_S3_CUSTOM_DOMAIN="${{ secrets.AWS_S3_CUSTOM_DOMAIN }}" -t "$REGISTRY_HOSTNAME"/"${{ secrets.GC_PROJECT_ID }}"/"$IMAGE":"$TAG" ./website/

    - name: Publish
      run: |
        docker push "$REGISTRY_HOSTNAME"/"${{ secrets.GC_PROJECT_ID }}"/"$IMAGE":"$TAG"


## Run the Terraform pipeline after 120 seconds
  provision-with-terraform:
    name: Terraform Plan
    runs-on: ubuntu-latest
    steps:
      - name: Sleep for 120 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '120s'

      - name: 'Checkout'
        uses: actions/checkout@v2

      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          project_id: "${{ secrets.GC_PROJECT_ID }}"
          service_account_key: "${{ secrets.GC_KEY }}"
          export_default_credentials: true

      - run: |
          gcloud info

      - name: 'Terraform Setup'
        uses: hashicorp/setup-terraform@v1

      - name: 'Terraform Init'
        run: terraform init "${{ secrets.TERRAFORM_BUILD_TYPE }}"

      - name: 'Terraform Plan'
        run: terraform plan -var-file deploy/"${{ secrets.TERRAFORM_BUILD_TYPE }}"/build.tfvars -out deploy/"${{ secrets.TERRAFORM_BUILD_TYPE }}"/build.out deploy/"${{ secrets.TERRAFORM_BUILD_TYPE }}"/

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve deploy/"${{ secrets.TERRAFORM_BUILD_TYPE }}"/build.out


## Optional Slack notification about pipeline end
#  slack-notification:
#    name: Notify Slack channel that deployment finished
#    runs-on: ubuntu-latest
#    steps:

#    - name: Send message to Slack API
#      uses: archive/github-actions-slack@v1.0.3
#      with:
#        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_ACCESS_TOKEN }}
#        slack-channel: ${{ secrets.SLACK_CHANNEL }}
#        slack-text: "Github Actions deployment process has ended."
